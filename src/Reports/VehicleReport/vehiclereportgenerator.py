#
# Program that generates a full report image + pdf.
# 
#
# Output is in current directory.

import datetime
from matplotlib.pyplot import table
import mysql.connector
from weasyprint import HTML
import os.path
import fitz
from typing import Tuple
import sys

head = """
<html>

<head>
    <title>Stock Report</title>
    <style>
        table,
        th,
        td {
            border-collapse: collapse;
        }
        
        th {
            padding: 20;
            border-bottom: 1px solid black;
        }
        
        td {
            padding: 20px;
        }
        
        @page {
            size: 7in 9.25in;
            margin: 27mm 16mm 27mm 16mm;
        }
    </style>
</head>

<body>
    <div class="address">
        Quick Fix Fitters, <br>19 High St., <br>Ashford, <br>Kent CT16 8YY
    </div>
    <br>
    <br>
    <div class="title" style="text-align: center;"> <b>Vehicle Report</b>
    </div>
    <br><br><br><br>
    <div class="table">
        <table>"""

tail = """    <footer style="position: absolute; bottom: 20;"> Â© Internal Document generated by GARITS.</footer>

</html>
"""

def connect():
    conn = None
    try:
        conn = mysql.connector.connect(host='REDACTED',
                                       database='REDACTED',
                                       user='REDACTED',
                                       password='REDACTED')
        if conn.is_connected():
            print('Connected to MySQL database')

    except Exception as e:
        print(e)

    return conn

# This function is taken from: https://www.thepythoncode.com/article/convert-pdf-files-to-images-in-python
def convert_pdf2img(input_file: str, pages: Tuple = None):
    """Converts pdf to image and generates a file by page"""
    # Open the document
    pdfIn = fitz.open(input_file)
    output_files = []
    # Iterate throughout the pages
    for pg in range(pdfIn.pageCount):
        if str(pages) != str(None):
            if str(pg) not in str(pages):
                continue
        # Select a page
        page = pdfIn[pg]
        rotate = int(0)
        # PDF Page is converted into a whole picture 1056*816 and then for each picture a screenshot is taken.
        # zoom = 1.33333333 -----> Image size = 1056*816
        # zoom = 2 ---> 2 * Default Resolution (text is clear, image text is hard to read)    = filesize small / Image size = 1584*1224
        # zoom = 4 ---> 4 * Default Resolution (text is clear, image text is barely readable) = filesize large
        # zoom = 8 ---> 8 * Default Resolution (text is clear, image text is readable) = filesize large
        zoom_x = 2
        zoom_y = 2
        # The zoom factor is equal to 2 in order to make text clear
        # Pre-rotate is to rotate if needed.
        mat = fitz.Matrix(zoom_x, zoom_y).preRotate(rotate)
        pix = page.getPixmap(matrix=mat, alpha=False)
        output_file = f"{os.path.dirname(__file__)}/preview_page{pg+1}.png"
        pix.writePNG(output_file)
        output_files.append(output_file)
    pdfIn.close()
    summary = {
        "File": input_file, "Pages": str(pages), "Output File(s)": str(output_files)
    }
    # Printing Summary
    #print("## Summary ########################################################")
    #print("\n".join("{}:{}".format(i, j) for i, j in summary.items()))
    #print("###################################################################")
    return output_files

def generateTable(qur):
    h = """
                <tr>
                <th>Service Type</th>
                <th>Amt. of Vehicles</th>
            </tr>
            """
    mid = f"""
        <tr>
                <td>MOT</td>
                <td>{qur[0][0]}</td>
            </tr>
                    <tr>
                <td>Repair</td>
                <td>{qur[1][0]}</td>
            </tr>
                    <tr>
                <td>Service</td>
                <td>{qur[2][0]}</td>
            </tr>
            """
    t = """
        </table>
    </div>"""
    return h+mid+t

def makeReport(table):
    # Get directory of this file, to keep all generated files here
    cpath = os.path.dirname(__file__)

    # Set filename to today's date
    fname = datetime.date.today()

    # Write HTML 
    with open(f"{cpath}/vehicleReport.html", "w") as f:
        f.write(head+table+tail)
    
    # Create PDF from HTML
    HTML(f'{cpath}/vehicleReport.html').write_pdf(f'{cpath}/{fname}-vehicleReport.pdf')


    # Create preview image for JPanel, as PDFs don't seem to be working properly
    convert_pdf2img(f"{cpath}/{fname}-vehicleReport.pdf")

def main():
    conn = connect()
    cursor = conn.cursor()
    ret = []

    motqur = f"SELECT COUNT(*) FROM Vehicles INNER JOIN Jobs J on Vehicles.registrationNo = J.registrationNo WHERE jobType = 'MOT'"
    servicequr = f"SELECT COUNT(*) FROM Vehicles INNER JOIN Jobs J on Vehicles.registrationNo = J.registrationNo WHERE jobType = 'Repair'"
    repairqur = f"SELECT COUNT(*) FROM Vehicles INNER JOIN Jobs J on Vehicles.registrationNo = J.registrationNo WHERE jobType = 'Service'"

    cursor.execute(motqur)

    for row in cursor:
        ret.append(row)
    
    cursor.execute(servicequr)

    for row in cursor:
        ret.append(row)

    cursor.execute(repairqur)

    for row in cursor:
        ret.append(row)

    table = generateTable(ret)

    makeReport(table)

    # Clean up .html
    #os.remove(f"{os.path.dirname(__file__)}/vehiclereport.html")

if __name__ == "__main__":
    main()