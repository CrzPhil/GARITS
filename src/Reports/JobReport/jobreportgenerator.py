#
# Program that generates a full report image + pdf.
# 
#
# Output is in current directory.

import datetime
import mysql.connector
from weasyprint import HTML
import os.path
import fitz
from typing import Tuple
import sys

head = """

<html>

<head>
    <title>Stock Report</title>
    <style>
        table,
        th,
        td {
            border-collapse: collapse;
        }
        
        th {
            padding: 20;
            border-bottom: 1px solid black;
        }
        
        td {
            padding: 20px;
        }
        
        @page {
            size: 7in 9.25in;
            margin: 27mm 16mm 27mm 16mm;
        }
    </style>
</head>

<body>
    <div class="address">
        Quick Fix Fitters, <br>19 High St., <br>Ashford, <br>Kent CT16 8YY
    </div>
    <br>
    <br>
    <div class="title" style="text-align: center;">"""

tail = """    <footer style="position: absolute; bottom: 20;"> Â© Internal Document generated by GARITS.</footer>

</html>
"""

def connect():
    conn = None
    try:
        conn = mysql.connector.connect(host='REDACTED',
                                       database='REDACTED',
                                       user='REDACTED',
                                       password='REDACTED')
        if conn.is_connected():
            print('Connected to MySQL database')

    except Exception as e:
        print(e)

    return conn

# This function is taken from: https://www.thepythoncode.com/article/convert-pdf-files-to-images-in-python
def convert_pdf2img(input_file: str, pages: Tuple = None):
    """Converts pdf to image and generates a file by page"""
    # Open the document
    pdfIn = fitz.open(input_file)
    output_files = []
    # Iterate throughout the pages
    for pg in range(pdfIn.pageCount):
        if str(pages) != str(None):
            if str(pg) not in str(pages):
                continue
        # Select a page
        page = pdfIn[pg]
        rotate = int(0)
        # PDF Page is converted into a whole picture 1056*816 and then for each picture a screenshot is taken.
        # zoom = 1.33333333 -----> Image size = 1056*816
        # zoom = 2 ---> 2 * Default Resolution (text is clear, image text is hard to read)    = filesize small / Image size = 1584*1224
        # zoom = 4 ---> 4 * Default Resolution (text is clear, image text is barely readable) = filesize large
        # zoom = 8 ---> 8 * Default Resolution (text is clear, image text is readable) = filesize large
        zoom_x = 2
        zoom_y = 2
        # The zoom factor is equal to 2 in order to make text clear
        # Pre-rotate is to rotate if needed.
        mat = fitz.Matrix(zoom_x, zoom_y).preRotate(rotate)
        pix = page.getPixmap(matrix=mat, alpha=False)
        output_file = f"{os.path.dirname(__file__)}/preview_page{pg+1}.png"
        pix.writePNG(output_file)
        output_files.append(output_file)
    pdfIn.close()
    summary = {
        "File": input_file, "Pages": str(pages), "Output File(s)": str(output_files)
    }
    # Printing Summary
    #print("## Summary ########################################################")
    #print("\n".join("{}:{}".format(i, j) for i, j in summary.items()))
    #print("###################################################################")
    return output_files

def generateTitle(type):
    return f"""        <b>{type} Job Report</b>
    </div>
    <br><br><br><br>"""

def generateTable(mechanics):
    head = """        <div class="time">
        Averages per Mechanic:
        <br><br><br>
        <table>
            <tr>
                <th>Mechanic</th>
                <th>Avg. Duration</th>
                <th>Avg. Price</th>
                </tr>
    """
    mid = """"""
    for mechanic in mechanics:
        mid += f"""            <tr>
                <td>{mechanic[0]} {mechanic[1]}</td>
                <td>{mechanic[3]}</td>
                <td>{mechanic[2]}</td>
            </tr>
        """
    tail = """        </table>
    </div><br><br><br><br>"""
    return head+mid+tail

def makeReport(title, table, type):
    # Get directory of this file, to keep all generated files here
    cpath = os.path.dirname(__file__)

    # Set filename to today's date
    fname = datetime.date.today()

    # Write HTML 
    with open(f"{cpath}/jobReport.html", "w") as f:
        f.write(head+title+table+tail)
    
    # Create PDF from HTML
    HTML(f'{cpath}/jobReport.html').write_pdf(f'{cpath}/{fname}-{type}-jobReport.pdf')


    # Create preview image for JPanel, as PDFs don't seem to be working properly
    convert_pdf2img(f"{cpath}/{fname}-{type}-jobReport.pdf")

def main(type):
    conn = connect()
    if type == "Overall" or type == "overall":
        qur = "SELECT S.firstName, S.lastName, AVG(J.price), AVG(J.duration) FROM Jobs J INNER JOIN Staff S ON mechanicID = S.staffID WHERE status = 1 AND jobType = 'MOT' OR jobType = 'Service' OR jobType = 'Repair' GROUP BY S.firstName, S.lastName;"
    else:
        qur = f"SELECT S.firstName, S.lastName, AVG(J.price), AVG(J.duration) FROM Jobs J INNER JOIN Staff S ON mechanicID = S.staffID WHERE status = 1 AND jobType = '{type}' GROUP BY S.firstName, S.lastName"
    
    cursor = conn.cursor()

    cursor.execute(qur)


    # RETURNS
    # fName | lName | Avg Cost | Avg Duration

    ret = []

    for row in cursor:
        ret.append(row)
    
    title = generateTitle(type)
    table = generateTable(ret)

    makeReport(title, table, type)

    # Clean up .html
    os.remove(f"{os.path.dirname(__file__)}/jobreport.html")

if __name__ == "__main__":
    if len(sys.argv) == 1:
        print(f"Usage: {sys.argv[0]} jobType \n jobType: Type of job in the GARITS DB. (MOT/Service/Repair)")
    else:
        main(sys.argv[1])
